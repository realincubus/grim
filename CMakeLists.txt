CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(grim)

SET( CMAKE_BUILD_TYPE DEBUG )

#SET( CMAKE_C_COMPILER clang++ )
#SET( CMAKE_CXX_COMPILER clang++ )
SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native" )
SET( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Wall -pedantic -DGLIBCXX_DEBUG -fsanitize=address" )
SET( CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_CXX_FLAGS} -std=c++1y" )
SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG}" )
SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" )

#SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )
#SET( LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib )

FIND_PACKAGE( OpenMP REQUIRED )
if(OPENMP_FOUND)
    message("OPENMP FOUND")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

SET( CMAKE_EXPORT_COMPILE_COMMANDS on )

#INCLUDE_DIRECTORIES( )
ADD_EXECUTABLE( bin_grim main.cpp )
#ADD_EXECUTABLE( bin_grim_norm_roads main_roads.cpp )
#ADD_EXECUTABLE( bin_grim_norm_buildings main_buildings.cpp )

TARGET_LINK_LIBRARIES( bin_grim shp xbase64 boost_mpi mpi mpi_cxx
    boost_serialization )
#TARGET_LINK_LIBRARIES( bin_grim_norm_roads shp xbase64 )
#TARGET_LINK_LIBRARIES( bin_grim_norm_buildings shp xbase64 )

#ENABLE_TESTING()

#ADD_SUBDIRECTORY( test )
